use crate::disassembler::AnalysisState;

#[derive(Debug, Clone, Copy)]
pub enum AddressingMode {
    Implied,
    ImmediateMFlag,
    ImmediateXFlag,
    ImmediateByte,
    PcRelative,
    PcRelativeLong,
    Direct,
    DirectIndexedX,
    DirectIndexedY,
    Indirect,
    IndexedIndirectX,
    IndirectIndexedY,
    IndirectLong,
    IndirectIndexedYLong,
    Absolute,
    AbsoluteX,
    AbsoluteY,
    AbsoluteLong,
    AbsoluteLongX,
    StackRelative,
    StackRelativeIndirectIndexed,
    AbsoluteIndirect,
    AbsoluteIndirectLong,
    AbsoluteIndirectIndexed,
    BlockMove,
}

impl AddressingMode {
    pub(super) fn operand_bytes(&self, analysis_state: &AnalysisState) -> usize {
        match *self {
            Implied => 0,
            ImmediateMFlag => 2 - (analysis_state.reg.m | analysis_state.reg.e) as usize,
            ImmediateXFlag => 2 - (analysis_state.reg.x | analysis_state.reg.e) as usize,
            ImmediateByte => 1,
            PcRelative => 1,
            PcRelativeLong => 2,
            Direct => 1,
            DirectIndexedX => 1,
            DirectIndexedY => 1,
            Indirect => 1,
            IndexedIndirectX => 1,
            IndirectIndexedY => 1,
            IndirectLong => 1,
            IndirectIndexedYLong => 1,
            Absolute => 2,
            AbsoluteX => 2,
            AbsoluteY => 2,
            AbsoluteLong => 3,
            AbsoluteLongX => 3,
            StackRelative => 1,
            StackRelativeIndirectIndexed => 1,
            AbsoluteIndirect => 2,
            AbsoluteIndirectLong => 2,
            AbsoluteIndirectIndexed => 2,
            BlockMove => 2,
        }
    }

    pub fn is_indirect(&self) -> bool {
        matches!(
            *self,
            IndexedIndirectX
                | IndirectIndexedY
                | IndirectLong
                | IndirectIndexedYLong
                | StackRelativeIndirectIndexed
                | AbsoluteIndirect
                | AbsoluteIndirectLong
                | AbsoluteIndirectIndexed
        )
    }
}

#[rustfmt::skip]
#[derive(Debug, Clone, Copy)]
pub enum Instruction {
    ADC, AND, ASL, BCC, BCS, BEQ, BIT, BMI, BNE, BPL,
    BRA, BRK, BRL, BVC, BVS, CLC, CLD, CLI, CLV, CMP,
    COP, CPX, CPY, DEC, DEX, DEY, EOR, INC, INX, INY,
    JML, JMP, JSL, JSR, LDA, LDX, LDY, LSR, MVN, MVP,
    NOP, ORA, PEA, PEI, PER, PHA, PHB, PHD, PHK, PHP,
    PHX, PHY, PLA, PLB, PLD, PLP, PLX, PLY, REP, ROL,
    ROR, RTI, RTL, RTS, SBC, SEC, SED, SEI, SEP, STA,
    STP, STX, STY, STZ, TAX, TAY, TCD, TCS, TDC, TRB,
    TSB, TSC, TSX, TXA, TXS, TXY, TYA, TYX, WAI, WDM,
    XBA, XCE,
}

#[derive(Debug, Clone, Copy)]
pub struct InstructionData {
    pub instruction: Instruction,
    pub mode: AddressingMode,
}

impl InstructionData {
    pub fn mnemonic(&self) -> String {
        format!("{:?}", self.instruction)
    }
}

use AddressingMode::*;
use Instruction::*;
#[rustfmt::skip]
pub const INSTRUCTION_DATA: [InstructionData; 256] = [
    //0x00 - 0x0f
    InstructionData { instruction: BRK, mode: ImmediateByte },
    InstructionData { instruction: ORA, mode: IndexedIndirectX },
    InstructionData { instruction: COP, mode: ImmediateByte },
    InstructionData { instruction: ORA, mode: StackRelative },
    InstructionData { instruction: TSB, mode: Direct },
    InstructionData { instruction: ORA, mode: Direct },
    InstructionData { instruction: ASL, mode: Direct },
    InstructionData { instruction: ORA, mode: IndirectLong },
    InstructionData { instruction: PHP, mode: Implied },
    InstructionData { instruction: ORA, mode: ImmediateMFlag },
    InstructionData { instruction: ASL, mode: Implied },
    InstructionData { instruction: PHD, mode: Implied },
    InstructionData { instruction: TSB, mode: Absolute },
    InstructionData { instruction: ORA, mode: Absolute },
    InstructionData { instruction: ASL, mode: Absolute },
    InstructionData { instruction: ORA, mode: AbsoluteLong },
    // 0x10 - 0x1f
    InstructionData { instruction: BPL, mode: PcRelative },
    InstructionData { instruction: ORA, mode: IndirectIndexedY },
    InstructionData { instruction: ORA, mode: Indirect },
    InstructionData { instruction: ORA, mode: StackRelativeIndirectIndexed },
    InstructionData { instruction: TRB, mode: Direct },
    InstructionData { instruction: ORA, mode: DirectIndexedX },
    InstructionData { instruction: ASL, mode: DirectIndexedX },
    InstructionData { instruction: ORA, mode: IndirectIndexedYLong },
    InstructionData { instruction: CLC, mode: Implied },
    InstructionData { instruction: ORA, mode: AbsoluteY },
    InstructionData { instruction: INC, mode: Implied },
    InstructionData { instruction: TCS, mode: Implied },
    InstructionData { instruction: TRB, mode: Absolute },
    InstructionData { instruction: ORA, mode: AbsoluteX },
    InstructionData { instruction: ASL, mode: AbsoluteX },
    InstructionData { instruction: ORA, mode: AbsoluteLongX },
    // 0x20 - 0x2f
    InstructionData { instruction: JSR, mode: Absolute },
    InstructionData { instruction: AND, mode: IndexedIndirectX },
    InstructionData { instruction: JSL, mode: AbsoluteLong },
    InstructionData { instruction: AND, mode: StackRelative },
    InstructionData { instruction: BIT, mode: Direct },
    InstructionData { instruction: AND, mode: Direct },
    InstructionData { instruction: ROL, mode: Direct },
    InstructionData { instruction: AND, mode: IndirectLong },
    InstructionData { instruction: PLP, mode: Implied },
    InstructionData { instruction: AND, mode: ImmediateMFlag },
    InstructionData { instruction: ROL, mode: Implied },
    InstructionData { instruction: PLD, mode: Implied },
    InstructionData { instruction: BIT, mode: Absolute },
    InstructionData { instruction: AND, mode: Absolute },
    InstructionData { instruction: ROL, mode: Absolute },
    InstructionData { instruction: AND, mode: AbsoluteLong },
    // 0x30 - 0x3f
    InstructionData { instruction: BMI, mode: PcRelative },
    InstructionData { instruction: AND, mode: IndirectIndexedY },
    InstructionData { instruction: AND, mode: Indirect },
    InstructionData { instruction: AND, mode: StackRelativeIndirectIndexed },
    InstructionData { instruction: BIT, mode: DirectIndexedX },
    InstructionData { instruction: AND, mode: DirectIndexedX },
    InstructionData { instruction: ROL, mode: DirectIndexedX },
    InstructionData { instruction: AND, mode: IndirectIndexedYLong },
    InstructionData { instruction: SEC, mode: Implied },
    InstructionData { instruction: AND, mode: AbsoluteY },
    InstructionData { instruction: DEC, mode: Implied },
    InstructionData { instruction: TSC, mode: Implied },
    InstructionData { instruction: BIT, mode: AbsoluteX },
    InstructionData { instruction: AND, mode: AbsoluteX },
    InstructionData { instruction: ROL, mode: AbsoluteX },
    InstructionData { instruction: AND, mode: AbsoluteLongX },
    // 0x40 - 0x4f
    InstructionData { instruction: RTI, mode: Implied },
    InstructionData { instruction: EOR, mode: IndexedIndirectX },
    InstructionData { instruction: WDM, mode: ImmediateByte },
    InstructionData { instruction: EOR, mode: StackRelative },
    InstructionData { instruction: MVP, mode: BlockMove },
    InstructionData { instruction: EOR, mode: Direct },
    InstructionData { instruction: LSR, mode: Direct },
    InstructionData { instruction: EOR, mode: IndirectLong },
    InstructionData { instruction: PHA, mode: Implied },
    InstructionData { instruction: EOR, mode: ImmediateMFlag },
    InstructionData { instruction: LSR, mode: Implied },
    InstructionData { instruction: PHK, mode: Implied },
    InstructionData { instruction: JMP, mode: Absolute },
    InstructionData { instruction: EOR, mode: Absolute },
    InstructionData { instruction: LSR, mode: Absolute },
    InstructionData { instruction: EOR, mode: AbsoluteLong },
    // 0x50 - 0x5f
    InstructionData { instruction: BVC, mode: PcRelative },
    InstructionData { instruction: EOR, mode: IndirectIndexedY },
    InstructionData { instruction: EOR, mode: Indirect },
    InstructionData { instruction: EOR, mode: StackRelativeIndirectIndexed },
    InstructionData { instruction: MVN, mode: BlockMove },
    InstructionData { instruction: EOR, mode: DirectIndexedX },
    InstructionData { instruction: LSR, mode: DirectIndexedX },
    InstructionData { instruction: EOR, mode: IndirectIndexedYLong },
    InstructionData { instruction: CLI, mode: Implied },
    InstructionData { instruction: EOR, mode: AbsoluteY },
    InstructionData { instruction: PHY, mode: Implied },
    InstructionData { instruction: TCD, mode: Implied },
    InstructionData { instruction: JML, mode: AbsoluteLong },
    InstructionData { instruction: EOR, mode: AbsoluteX },
    InstructionData { instruction: LSR, mode: AbsoluteX },
    InstructionData { instruction: EOR, mode: AbsoluteLongX },
    // 0x60 - 0x6f
    InstructionData { instruction: RTS, mode: Implied },
    InstructionData { instruction: ADC, mode: IndexedIndirectX },
    InstructionData { instruction: PER, mode: Absolute },
    InstructionData { instruction: ADC, mode: StackRelative },
    InstructionData { instruction: STZ, mode: Direct },
    InstructionData { instruction: ADC, mode: Direct },
    InstructionData { instruction: ROR, mode: Direct },
    InstructionData { instruction: ADC, mode: IndirectLong },
    InstructionData { instruction: PLA, mode: Implied },
    InstructionData { instruction: ADC, mode: ImmediateMFlag },
    InstructionData { instruction: ROR, mode: Implied },
    InstructionData { instruction: RTL, mode: Implied },
    InstructionData { instruction: JMP, mode: AbsoluteIndirect },
    InstructionData { instruction: ADC, mode: Absolute },
    InstructionData { instruction: ROR, mode: Absolute },
    InstructionData { instruction: ADC, mode: AbsoluteLong },
    // 0x70 - 0x7f
    InstructionData { instruction: BVS, mode: PcRelative },
    InstructionData { instruction: ADC, mode: IndirectIndexedY },
    InstructionData { instruction: ADC, mode: Indirect },
    InstructionData { instruction: ADC, mode: StackRelativeIndirectIndexed },
    InstructionData { instruction: STZ, mode: DirectIndexedX },
    InstructionData { instruction: ADC, mode: DirectIndexedX },
    InstructionData { instruction: ROR, mode: DirectIndexedX },
    InstructionData { instruction: ADC, mode: IndirectIndexedYLong },
    InstructionData { instruction: SEI, mode: Implied },
    InstructionData { instruction: ADC, mode: AbsoluteY },
    InstructionData { instruction: PLY, mode: Implied },
    InstructionData { instruction: TDC, mode: Implied },
    InstructionData { instruction: JMP, mode: AbsoluteIndirectIndexed },
    InstructionData { instruction: ADC, mode: AbsoluteX },
    InstructionData { instruction: ROR, mode: AbsoluteX },
    InstructionData { instruction: ADC, mode: AbsoluteLongX },
    // 0x80 - 0x8f
    InstructionData { instruction: BRA, mode: PcRelative },
    InstructionData { instruction: STA, mode: IndexedIndirectX },
    InstructionData { instruction: BRL, mode: PcRelativeLong },
    InstructionData { instruction: STA, mode: StackRelative },
    InstructionData { instruction: STY, mode: Direct },
    InstructionData { instruction: STA, mode: Direct },
    InstructionData { instruction: STX, mode: Direct },
    InstructionData { instruction: STA, mode: IndirectLong },
    InstructionData { instruction: DEY, mode: Implied },
    InstructionData { instruction: BIT, mode: ImmediateMFlag },
    InstructionData { instruction: TXA, mode: Implied },
    InstructionData { instruction: PHB, mode: Implied },
    InstructionData { instruction: STY, mode: Absolute },
    InstructionData { instruction: STA, mode: Absolute },
    InstructionData { instruction: STX, mode: Absolute },
    InstructionData { instruction: STA, mode: AbsoluteLong },
    // 0x90 - 0x9f
    InstructionData { instruction: BCC, mode: PcRelative },
    InstructionData { instruction: STA, mode: IndirectIndexedY },
    InstructionData { instruction: STA, mode: Indirect },
    InstructionData { instruction: STA, mode: StackRelativeIndirectIndexed },
    InstructionData { instruction: STY, mode: DirectIndexedX },
    InstructionData { instruction: STA, mode: DirectIndexedX },
    InstructionData { instruction: STX, mode: DirectIndexedY },
    InstructionData { instruction: STA, mode: IndirectIndexedYLong },
    InstructionData { instruction: TYA, mode: Implied },
    InstructionData { instruction: STA, mode: AbsoluteY },
    InstructionData { instruction: TXS, mode: Implied },
    InstructionData { instruction: TXY, mode: Implied },
    InstructionData { instruction: STZ, mode: Absolute },
    InstructionData { instruction: STA, mode: AbsoluteX },
    InstructionData { instruction: STZ, mode: AbsoluteX },
    InstructionData { instruction: STA, mode: AbsoluteLongX },
    // 0xa0 - 0xaf
    InstructionData { instruction: LDY, mode: ImmediateXFlag },
    InstructionData { instruction: LDA, mode: IndexedIndirectX },
    InstructionData { instruction: LDX, mode: ImmediateXFlag },
    InstructionData { instruction: LDA, mode: StackRelative },
    InstructionData { instruction: LDY, mode: Direct },
    InstructionData { instruction: LDA, mode: Direct },
    InstructionData { instruction: LDX, mode: Direct },
    InstructionData { instruction: LDA, mode: IndirectLong },
    InstructionData { instruction: TAY, mode: Implied },
    InstructionData { instruction: LDA, mode: ImmediateMFlag },
    InstructionData { instruction: TAX, mode: Implied },
    InstructionData { instruction: PLB, mode: Implied },
    InstructionData { instruction: LDY, mode: Absolute },
    InstructionData { instruction: LDA, mode: Absolute },
    InstructionData { instruction: LDX, mode: Absolute },
    InstructionData { instruction: LDA, mode: AbsoluteLong },
    // 0xb0 - 0xbf
    InstructionData { instruction: BCS, mode: PcRelative },
    InstructionData { instruction: LDA, mode: IndirectIndexedY },
    InstructionData { instruction: LDA, mode: Indirect },
    InstructionData { instruction: LDA, mode: StackRelativeIndirectIndexed },
    InstructionData { instruction: LDY, mode: DirectIndexedX },
    InstructionData { instruction: LDA, mode: DirectIndexedX },
    InstructionData { instruction: LDX, mode: DirectIndexedY },
    InstructionData { instruction: LDA, mode: IndirectIndexedYLong },
    InstructionData { instruction: CLV, mode: Implied },
    InstructionData { instruction: LDA, mode: AbsoluteY },
    InstructionData { instruction: TSX, mode: Implied },
    InstructionData { instruction: TYX, mode: Implied },
    InstructionData { instruction: LDY, mode: AbsoluteX },
    InstructionData { instruction: LDA, mode: AbsoluteX },
    InstructionData { instruction: LDX, mode: AbsoluteY },
    InstructionData { instruction: LDA, mode: AbsoluteLongX },
    // 0xc0 - 0xcf
    InstructionData { instruction: CPY, mode: ImmediateXFlag },
    InstructionData { instruction: CMP, mode: IndexedIndirectX },
    InstructionData { instruction: REP, mode: ImmediateByte },
    InstructionData { instruction: CMP, mode: StackRelative },
    InstructionData { instruction: CPY, mode: Direct },
    InstructionData { instruction: CMP, mode: Direct },
    InstructionData { instruction: DEC, mode: Direct },
    InstructionData { instruction: CMP, mode: IndirectLong },
    InstructionData { instruction: INY, mode: Implied },
    InstructionData { instruction: CMP, mode: ImmediateMFlag },
    InstructionData { instruction: DEX, mode: Implied },
    InstructionData { instruction: WAI, mode: Implied },
    InstructionData { instruction: CPY, mode: Absolute },
    InstructionData { instruction: CMP, mode: Absolute },
    InstructionData { instruction: DEC, mode: Absolute },
    InstructionData { instruction: CMP, mode: AbsoluteLong },
    // 0xd0 - 0xdf
    InstructionData { instruction: BNE, mode: PcRelative },
    InstructionData { instruction: CMP, mode: IndirectIndexedY },
    InstructionData { instruction: CMP, mode: Indirect },
    InstructionData { instruction: CMP, mode: StackRelativeIndirectIndexed },
    InstructionData { instruction: PEI, mode: Indirect },
    InstructionData { instruction: CMP, mode: DirectIndexedX },
    InstructionData { instruction: DEC, mode: DirectIndexedX },
    InstructionData { instruction: CMP, mode: IndirectIndexedYLong },
    InstructionData { instruction: CLD, mode: Implied },
    InstructionData { instruction: CMP, mode: AbsoluteY },
    InstructionData { instruction: PHX, mode: Implied },
    InstructionData { instruction: STP, mode: Implied },
    InstructionData { instruction: JMP, mode: AbsoluteIndirectLong },
    InstructionData { instruction: CMP, mode: AbsoluteX },
    InstructionData { instruction: DEC, mode: AbsoluteX },
    InstructionData { instruction: CMP, mode: AbsoluteLongX },
    // 0xe0 - 0xef
    InstructionData { instruction: CPX, mode: ImmediateXFlag },
    InstructionData { instruction: SBC, mode: IndexedIndirectX },
    InstructionData { instruction: SEP, mode: ImmediateByte },
    InstructionData { instruction: SBC, mode: StackRelative },
    InstructionData { instruction: CPX, mode: Direct },
    InstructionData { instruction: SBC, mode: Direct },
    InstructionData { instruction: INC, mode: Direct },
    InstructionData { instruction: SBC, mode: IndirectLong },
    InstructionData { instruction: INX, mode: Implied },
    InstructionData { instruction: SBC, mode: ImmediateMFlag },
    InstructionData { instruction: NOP, mode: Implied },
    InstructionData { instruction: XBA, mode: Implied },
    InstructionData { instruction: CPX, mode: Absolute },
    InstructionData { instruction: SBC, mode: Absolute },
    InstructionData { instruction: INC, mode: Absolute },
    InstructionData { instruction: SBC, mode: AbsoluteLong },
    // 0xf0 - 0xff
    InstructionData { instruction: BEQ, mode: PcRelative },
    InstructionData { instruction: SBC, mode: IndirectIndexedY },
    InstructionData { instruction: SBC, mode: Indirect },
    InstructionData { instruction: SBC, mode: StackRelativeIndirectIndexed },
    InstructionData { instruction: PEA, mode: Absolute },
    InstructionData { instruction: SBC, mode: DirectIndexedX },
    InstructionData { instruction: INC, mode: DirectIndexedX },
    InstructionData { instruction: SBC, mode: IndirectIndexedYLong },
    InstructionData { instruction: SED, mode: Implied },
    InstructionData { instruction: SBC, mode: AbsoluteY },
    InstructionData { instruction: PLX, mode: Implied },
    InstructionData { instruction: XCE, mode: Implied },
    InstructionData { instruction: JSR, mode: AbsoluteIndirectIndexed },
    InstructionData { instruction: SBC, mode: AbsoluteX },
    InstructionData { instruction: INC, mode: AbsoluteX },
    InstructionData { instruction: SBC, mode: AbsoluteLongX },
];
